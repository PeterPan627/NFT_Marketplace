const GraphQueryUrls = {
  heroList: `query getMarketPlaceQuery($size: Int, $page: Int, $sortField: HeroOrderSortField!, $sortDirection: SortDirection!, $strength: [Float!], $vitality: [Float!], $agility: [Float!], $heroRaces: [HeroRaceConstant!], $rarities: [HeroRarityConstant!], $genders: [HeroGenderConstant!], $recruitedCount: [Float!], $bodyParts: [String!], $normalSkills: [String!], $passiveSkills: [String!], $ultimateSkills: [String!], $currency: String) {  heroOrders(    size: $size    page: $page    sortField: $sortField    sortDirection: $sortDirection    strength: $strength    vitality: $vitality    agility: $agility    heroRaces: $heroRaces    rarities: $rarities    genders: $genders    recruitedCount: $recruitedCount    bodyParts: $bodyParts    normalSkills: $normalSkills    passiveSkills: $passiveSkills    ultimateSkills: $ultimateSkills    currency: $currency  ) {    items {      _id      orderId      hero      name      image      tokenId      heroRace      currency {        symbol        decimal        slug        __typename      }      price      recruitedCount      rarity      createdAt      __typename    }    total    size    page    __typename  }}`,
  equipmentList: `query GetNFTEquipmentOrders($owner: String, $currency: String, $price: [Decimal128!], $sortDirection: SortDirection, $sortField: HeroOrderSortField, $page: Int, $size: Int, $races: [EquipmentRaceConstant!], $rarities: [EquipmentRarityConstant!], $types: [EquipmentTypeConstant!]) {  getNFTEquipmentOrders(    owner: $owner    currency: $currency    price: $price    sortDirection: $sortDirection    sortField: $sortField    page: $page    size: $size    races: $races    rarities: $rarities    types: $types  ) {    total    size    page    items {      status      subAttribute4      subAttribute3      createdAt      subAttribute2      subAttribute1      attribute2      attribute1      rarity      race      type      price      currency {        symbol        contractAddress        decimal        slug        __typename      }      image      description      name      equipment      tokenId      __typename    }    __typename  }}`,
  heroDetail: `query UserHeroDetailQuery($tokenId: Float!) {  userHeroDetail(tokenId: $tokenId) {    _id    name    description    image    tokenId    rarity    gender    heroRace    maxLevel    strength    vitality    agility    ownedMythical    owner {      address      __typename    }    bodyParts {      type      element      name      percentage      isMythical      __typename    }    normalSkill {      damage      mana      rarity      race      type      image      description      name      __typename    }    passiveOneSkill {      name      damage      mana      race      rarity      type      image      description      __typename    }    passiveTwoSkill {      name      description      type      image      rarity      race      mana      damage      __typename    }    ultimateOneSkill {      name      description      image      type      rarity      race      mana      damage      __typename    }    ultimateTwoSkill {      name      description      image      type      race      mana      damage      rarity      __typename    }    isGenesis    recruitedCount    level    exp    createdAt    stamina    updatedAt    __typename  }}`,
  equipmentDetail: `query NFTEquipmentDetail($tokenId: Float!) {  getNFTEquipmentDetail(tokenId: $tokenId) {    _id    owner {      _id      address      __typename    }    name    description    image    tokenId    type    rarity    race    attribute1    attribute2    subAttribute1    subAttribute2    subAttribute3    subAttribute4    createdAt    __typename  }}`,
  tokenPrice: `query getTokenPriceQuery {  tokenPrice {    price    symbol    slug    __typename  }}`,
  heroListByOwner: `query UserHeroesByOwner($address: String!, $rarities: [HeroRarityConstant!], $genders: [HeroGenderConstant!], $heroRaces: [HeroRaceConstant!], $recruitedCount: [Float!], $strength: [Float!], $vitality: [Float!], $agility: [Float!], $page: Int, $size: Int) {  userHeroesByOwner(    address: $address    rarities: $rarities    genders: $genders    heroRaces: $heroRaces    recruitedCount: $recruitedCount    strength: $strength    vitality: $vitality    agility: $agility    page: $page    size: $size  ) {    items {      name      description      tokenId      rarity      image      gender      heroRace      maxLevel      strength      vitality      ownedMythical      agility      bodyParts {        type        name        element        isMythical        percentage        __typename      }      recruitedCount      level      exp      stamina      createdAt      updatedAt      __typename    }    total    size    page    __typename  }}`,
  equipmentListByOwner: `query UserEquipments($address: String!, $page: Int, $size: Int, $races: [EquipmentRaceConstant!], $rarities: [EquipmentRarityConstant!], $types: [EquipmentTypeConstant!]) {  getNFTEquipments(    address: $address    page: $page    size: $size    races: $races    rarities: $rarities    types: $types  ) {    items {      name      description      tokenId      rarity      type      image      race      attribute1      attribute2      subAttribute1      subAttribute2      subAttribute3      subAttribute4      __typename    }    total    size    page    __typename  }}`,
  heroMarketPlace: `query getMarketPlaceQuery($owner: String, $size: Int, $page: Int, $sortField: HeroOrderSortField!, $sortDirection: SortDirection!, $strength: [Float!], $vitality: [Float!], $agility: [Float!], $heroRaces: [HeroRaceConstant!], $rarities: [HeroRarityConstant!], $genders: [HeroGenderConstant!]) {  heroOrders(    owner: $owner    size: $size    page: $page    sortField: $sortField    sortDirection: $sortDirection    strength: $strength    vitality: $vitality    agility: $agility    heroRaces: $heroRaces    rarities: $rarities    genders: $genders  ) {    items {      _id      orderId      hero      name      image      tokenId      heroRace      currency {        symbol        decimal        slug        __typename      }      price      recruitedCount      rarity      createdAt      __typename    }    total    size    page    __typename  }}`,
  heroHistory: `query UserOrderHistory($address: String!, $size: Int, $page: Int, $sortField: String, $sortDirection: SortDirection) {  userOrderHistory(    address: $address    size: $size    page: $page    sortField: $sortField    sortDirection: $sortDirection  ) {    items {      _id      txId      orderId      hero      user      action      blockTimestamp      orderInfo {        _id        tokenId        owner {          _id          address          __typename        }        taker {          _id          address          __typename        }        name        image        currency {          symbol          contractAddress          decimal          slug          __typename        }        price        heroRace        gender        status        __typename      }      __typename    }    total    size    page    __typename  }}`,
  equipmentHistory: `query UserEquipmentOrderHistory($address: String!, $size: Int, $page: Int, $sortField: String, $sortDirection: SortDirection) {  userEquipmentOrderHistory(    address: $address    size: $size    page: $page    sortField: $sortField    sortDirection: $sortDirection  ) {    items {      _id      txId      orderId      user      action      blockTimestamp      orderInfo {        _id        tokenId        owner {          _id          address          __typename        }        taker {          _id          address          __typename        }        name        image        currency {          symbol          contractAddress          decimal          slug          __typename        }        price        race        status        __typename      }      __typename    }    total    size    page    __typename  }}`,
};

export default GraphQueryUrls;

/**
 *
 * variables of heroListByOwner and equipmentListByOwner
 * address: account address
 * page: number
 * size: number
 *
 * variables of heroMarketplace, equipmentMarketPlace, heroHistory, equipmentHistory
 * owner: account Address
 * page: number
 * size: number
 * sortDirection: desc or asc
 * sortField:
 *
 */
