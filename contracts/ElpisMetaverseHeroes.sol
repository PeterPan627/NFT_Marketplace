// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "./library/ERC721.sol";
import "./library/ERC721Enumerable.sol";
import "./library/ERC721Burnable.sol";
import "./library/ERC721Pausable.sol";
import "./access/AccessControlEnumerable.sol";
import "./utils/Context.sol";
import "./utils/Counters.sol";
import "./ElpisHeroesData.sol";

/**
 * @dev {ERC721} token, including:
 *
 *  - ability for holders to burn (destroy) their tokens
 *  - a minter role that allows for token minting (creation)
 *  - a pauser role that allows to stop all token transfers
 *  - token ID and URI autogeneration
 *
 * This contract uses {AccessControl} to lock permissioned functions using the
 * different roles - head to its documentation for details.
 *
 * The account that deploys the contract will be granted the minter and pauser
 * roles, as well as the default admin role, which will let it grant both minter
 * and pauser roles to other accounts.
 */
contract ElpisMetaverseHeroes is
    Context,
    AccessControlEnumerable,
    ERC721Enumerable,
    ERC721Burnable,
    ERC721Pausable
{
    using Counters for Counters.Counter;

    ElpisHeroesData private elpisHeroesData;

    bytes32 public constant MINTER_ROLE = keccak256("MINTER_ROLE");
    bytes32 public constant PAUSER_ROLE = keccak256("PAUSER_ROLE");

    Counters.Counter private _tokenIdTracker;

    string private _baseTokenURI;

    // map ElpisHero's token id to its index
    mapping(uint256 => uint256) public elpisHeroIndexes;

    /**
     * @dev Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE` and `PAUSER_ROLE` to the
     * account that deploys the contract.
     *
     * Token URIs will be autogenerated based on `baseURI` and their token IDs.
     * See {ERC721-tokenURI}.
     */
    constructor(
        ElpisHeroesData _elpisHeroesData // address admin // string memory baseTokenURI
    ) ERC721("Elpis Metaverse Heroes", "EMH") {
        // _baseTokenURI = baseTokenURI;
        address caller = msg.sender;

        _setupRole(DEFAULT_ADMIN_ROLE, caller);

        _setupRole(MINTER_ROLE, caller);
        _setupRole(PAUSER_ROLE, caller);

        elpisHeroesData = _elpisHeroesData;

        mint(caller, "Tigress");
        mint(caller, "Mantis");
        mint(caller, "Viper");
        mint(caller, "Crane");
        mint(caller, "Monkey");
    }

    function _baseURI() internal view virtual override returns (string memory) {
        return _baseTokenURI;
    }

    /**
     * @notice Allows the owner to set the base URI to be used for all token IDs
     * @param _uri: base URI
     * @dev Callable by owner
     */
    function setBaseURI(string memory _uri) external {
        require(hasRole(DEFAULT_ADMIN_ROLE, _msgSender()), "EMH: only admin");
        _baseTokenURI = _uri;
    }

    /**
     * @dev Creates a new token for `to`. Its token ID will be automatically
     * assigned (and available on the emitted {IERC721-Transfer} event), and the token
     * URI autogenerated based on the base URI passed at construction.
     *
     * See {ERC721-_mint}.
     *
     * Requirements:
     *
     * - the caller must have the `MINTER_ROLE`.
     */
    function mint(address to, string memory _elpisHeroName) public virtual {
        require(hasRole(MINTER_ROLE, _msgSender()), "EMH: only minters");

        // We cannot just use balanceOf to create the new tokenId because tokens
        // can be burned (destroyed), so we need a separate counter.
        _mint(to, _tokenIdTracker.current());
        elpisHeroesData.saveMetadataOfElpisHero(
            _tokenIdTracker.current(),
            _elpisHeroName,
            to,
            0
        );
        // elpisHeroesData.updateStatus(_tokenIdTracker.current(), "Open");
        _tokenIdTracker.increment();
    }

    /**
     * @dev Pauses all token transfers.
     *
     * See {ERC721Pausable} and {Pausable-_pause}.
     *
     * Requirements:
     *
     * - the caller must have the `PAUSER_ROLE`.
     */
    function pause() public virtual {
        require(hasRole(PAUSER_ROLE, _msgSender()), "EMH: only pauser");
        _pause();
    }

    /**
     * @dev Unpauses all token transfers.
     *
     * See {ERC721Pausable} and {Pausable-_unpause}.
     *
     * Requirements:
     *
     * - the caller must have the `PAUSER_ROLE`.
     */
    function unpause() public virtual {
        require(
            hasRole(PAUSER_ROLE, _msgSender()),
            "EMH: must have pauser role to unpause"
        );
        _unpause();
    }

    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 tokenId
    ) internal virtual override(ERC721, ERC721Enumerable, ERC721Pausable) {
        super._beforeTokenTransfer(from, to, tokenId);
    }

    /**
     * @dev See {IERC165-supportsInterface}.
     */
    function supportsInterface(bytes4 interfaceId)
        public
        view
        virtual
        override(AccessControlEnumerable, ERC721, ERC721Enumerable)
        returns (bool)
    {
        return super.supportsInterface(interfaceId);
    }

    function revokeApprove(uint256 tokenId) public {
        approve(address(0), tokenId);
    }
}
