/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace ElpisHeroDataObjects {
  export type ElpisHeroDataStruct = {
    elpisHeroId: BigNumberish;
    elpisHeroName: string;
    ownerAddress: string;
    heroPrice: BigNumberish;
    status: string;
    reputation: BigNumberish;
  };

  export type ElpisHeroDataStructOutput = [
    BigNumber,
    string,
    string,
    BigNumber,
    string,
    BigNumber
  ] & {
    elpisHeroId: BigNumber;
    elpisHeroName: string;
    ownerAddress: string;
    heroPrice: BigNumber;
    status: string;
    reputation: BigNumber;
  };
}

export interface ElpisHeroesDataInterface extends utils.Interface {
  contractName: "ElpisHeroesData";
  functions: {
    "elpisHeroIds(uint256)": FunctionFragment;
    "elpisHeroesData(uint256)": FunctionFragment;
    "getAllElpisData()": FunctionFragment;
    "getElpisHeroData(uint256)": FunctionFragment;
    "saveMetadataOfElpisHero(uint256,string,address,uint256)": FunctionFragment;
    "setElpisHeroContract(address)": FunctionFragment;
    "updateOwnerOfELpisHero(uint256,address)": FunctionFragment;
    "updatePrice(uint256,uint256)": FunctionFragment;
    "updateStatus(uint256,string)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "elpisHeroIds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "elpisHeroesData",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllElpisData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getElpisHeroData",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "saveMetadataOfElpisHero",
    values: [BigNumberish, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setElpisHeroContract",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateOwnerOfELpisHero",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePrice",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateStatus",
    values: [BigNumberish, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "elpisHeroIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "elpisHeroesData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllElpisData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getElpisHeroData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "saveMetadataOfElpisHero",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setElpisHeroContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateOwnerOfELpisHero",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateStatus",
    data: BytesLike
  ): Result;

  events: {};
}

export interface ElpisHeroesData extends BaseContract {
  contractName: "ElpisHeroesData";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ElpisHeroesDataInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    elpisHeroIds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    elpisHeroesData(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string, BigNumber, string, BigNumber] & {
        elpisHeroId: BigNumber;
        elpisHeroName: string;
        ownerAddress: string;
        heroPrice: BigNumber;
        status: string;
        reputation: BigNumber;
      }
    >;

    getAllElpisData(
      overrides?: CallOverrides
    ): Promise<
      [ElpisHeroDataObjects.ElpisHeroDataStructOutput[]] & {
        _elpisHeroesData: ElpisHeroDataObjects.ElpisHeroDataStructOutput[];
      }
    >;

    getElpisHeroData(
      elpisHeroId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [ElpisHeroDataObjects.ElpisHeroDataStructOutput] & {
        _elpisHeroData: ElpisHeroDataObjects.ElpisHeroDataStructOutput;
      }
    >;

    saveMetadataOfElpisHero(
      _elpisHeroId: BigNumberish,
      _elpisHeroName: string,
      _ownerAddress: string,
      _heroPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setElpisHeroContract(
      _elpisHeroes: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateOwnerOfELpisHero(
      _elpisHeroId: BigNumberish,
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updatePrice(
      _elpisHeroId: BigNumberish,
      _newPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateStatus(
      _elpisHeroId: BigNumberish,
      _newStatus: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  elpisHeroIds(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  elpisHeroesData(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, string, BigNumber, string, BigNumber] & {
      elpisHeroId: BigNumber;
      elpisHeroName: string;
      ownerAddress: string;
      heroPrice: BigNumber;
      status: string;
      reputation: BigNumber;
    }
  >;

  getAllElpisData(
    overrides?: CallOverrides
  ): Promise<ElpisHeroDataObjects.ElpisHeroDataStructOutput[]>;

  getElpisHeroData(
    elpisHeroId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<ElpisHeroDataObjects.ElpisHeroDataStructOutput>;

  saveMetadataOfElpisHero(
    _elpisHeroId: BigNumberish,
    _elpisHeroName: string,
    _ownerAddress: string,
    _heroPrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setElpisHeroContract(
    _elpisHeroes: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateOwnerOfELpisHero(
    _elpisHeroId: BigNumberish,
    _newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updatePrice(
    _elpisHeroId: BigNumberish,
    _newPrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateStatus(
    _elpisHeroId: BigNumberish,
    _newStatus: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    elpisHeroIds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    elpisHeroesData(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string, BigNumber, string, BigNumber] & {
        elpisHeroId: BigNumber;
        elpisHeroName: string;
        ownerAddress: string;
        heroPrice: BigNumber;
        status: string;
        reputation: BigNumber;
      }
    >;

    getAllElpisData(
      overrides?: CallOverrides
    ): Promise<ElpisHeroDataObjects.ElpisHeroDataStructOutput[]>;

    getElpisHeroData(
      elpisHeroId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<ElpisHeroDataObjects.ElpisHeroDataStructOutput>;

    saveMetadataOfElpisHero(
      _elpisHeroId: BigNumberish,
      _elpisHeroName: string,
      _ownerAddress: string,
      _heroPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setElpisHeroContract(
      _elpisHeroes: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateOwnerOfELpisHero(
      _elpisHeroId: BigNumberish,
      _newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePrice(
      _elpisHeroId: BigNumberish,
      _newPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateStatus(
      _elpisHeroId: BigNumberish,
      _newStatus: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    elpisHeroIds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    elpisHeroesData(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAllElpisData(overrides?: CallOverrides): Promise<BigNumber>;

    getElpisHeroData(
      elpisHeroId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    saveMetadataOfElpisHero(
      _elpisHeroId: BigNumberish,
      _elpisHeroName: string,
      _ownerAddress: string,
      _heroPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setElpisHeroContract(
      _elpisHeroes: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateOwnerOfELpisHero(
      _elpisHeroId: BigNumberish,
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updatePrice(
      _elpisHeroId: BigNumberish,
      _newPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateStatus(
      _elpisHeroId: BigNumberish,
      _newStatus: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    elpisHeroIds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    elpisHeroesData(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAllElpisData(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getElpisHeroData(
      elpisHeroId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    saveMetadataOfElpisHero(
      _elpisHeroId: BigNumberish,
      _elpisHeroName: string,
      _ownerAddress: string,
      _heroPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setElpisHeroContract(
      _elpisHeroes: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateOwnerOfELpisHero(
      _elpisHeroId: BigNumberish,
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updatePrice(
      _elpisHeroId: BigNumberish,
      _newPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateStatus(
      _elpisHeroId: BigNumberish,
      _newStatus: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
